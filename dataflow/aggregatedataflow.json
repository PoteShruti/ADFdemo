{
	"name": "aggregatedataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inputstudent",
						"type": "DatasetReference"
					},
					"name": "input"
				},
				{
					"dataset": {
						"referenceName": "inputdepartment",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OUTPUTDATASET",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Name as string,",
				"          Age as string,",
				"          deptID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> input",
				"source(output(",
				"          {deptID } as string,",
				"          { Department} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"input aggregate(groupBy(deptID),",
				"     Totalstudent = count(deptID)) ~> aggregate1",
				"aggregate1, source1 join(deptID == {deptID },",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['agrregateoutput.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {deptID },",
				"          { Department},",
				"          Totalstudent",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}